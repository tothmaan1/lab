GitLab Practice Notes
Yesterday, we executed the following steps:


Created an account on gitlab.com.  Created a repository named "lab" on GitLab.  On our personal laptop, we created an SSH public/private key pair: a) To generate the keys, run:
bash ssh-keygen -t rsa -b 4096 -C "your_email@example.com" Follow the prompts, and take all defaults for file location and passphrase (if you desire a passphrase).

b) Display the public key and copy it:
cat ~/.ssh/id_rsa.pub Copy the output.
Uploaded the public SSH key to GitLab:
Go to GitLab, then navigate to Settings > SSH Keys.
Paste your public key into the provided field and save it.

Cloned the repository that we created on GitLab:

Use the SSH method to clone your repository (ensure you have the correct URL from GitLab):

git clone git@gitlab.com:<username>/lab.git
Replace <username> with your GitLab username.

Additional Notes:
Make sure you use the SSH URL from GitLab when cloning if you set up SSH keys, as this allows you to operate without entering your credentials frequently.

remember to configure your Git client with your name and email:

git config --global user.name "Your Name"
git config --global user.email "your_email@example.com"
These configurations help identify the author of the commits and are necessary for collaborative projects.
This should correct and clarify your practice notes. Let me know if there's anything else you'd like to add or further details you need!
1. git add file name
2. git commit -m "initial commit'
3. git push


#04/24/2024
# learning basic vi editor
- vi/vim has 3 modes
  1. esc mode
  2. insert mode
  3. normal mode

-First thing to do is enter into insert mode/allows you to type
-w: write
-q: quit
-!: immediately
-gg: takes you to the top of page
-yy: means copy
-P: means paste
-G: takes you to the bottom of page
-$: takes you to the end of the line/sentence
-0: takes you to the beginning of the line/sentence
-L: is go right on 1 character
-J: is to go down on 1 character
-H: is to go left on 1 character 
-[0-9] (L,K,J,H): is go any number you chose to move on the character
-d$: is to delete entire line
O: is to add one line above a line then edit 
cd: will to take home directory
pwd: will tell you where you are
cd ~: same as cd
Full path: Shows complete path ( example: /home/homedirectoryname/ )
Relative path: shows path previous 
rm -fr: will remove without asking ( use it when knowing )
cd ..: takes 1 step backward
mkdir: makes directory
rmdir: makes directory
mv: moves file
t: stickypit means everyone full has access,view, and can edit
df -h: display file system in human understanding 

`
File permissions
W: is write and equels to 4
R: is read and equels to 2
X: is execute and equels to 1

Owner    Group    Others
wrx      wrx      wrx 
7         7       7

:w

